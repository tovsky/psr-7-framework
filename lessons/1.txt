PSR-7 фреймворк 1/7: Структура и работа с HTTP

https://www.youtube.com/watch?v=w4iqxN0nfTs&t=123s

Запуск сервера встроенного в PHP на localhost
    php -S 0.0.0.0:8080 -t public public/index.php

На этом встроенном сервере можем передавать гет параметры
    http://0.0.0.0:8080/?name=Igor


В PHPStorm есть HTTP клиент можно делать отправку на простенькие АПИ
    Tools -> HTTP Client -> Test RESTful Web Service

Делаем отдельный класс фремворка для работы с Http, который будет иметь методы для получения присланных данных.

Первичная настройка composer.json
    Для добавления зависимостей по алфавиту
        "config": {
            "sort-packages": true
        },

    Установка зависимостей, указанных
        composer install

    Добавляем в зависимость проекта для безопасности
        composer require roave/security-advisories:dev-master
    этот пакет добавит в файл composer.lock список пакетов в раздел conflict
    это те версии популярных пакетов, в которых были найдены критические уязвимости


    Для автозагрузки наших классов с помощью composer укажем, что если неймспейс начинается с Framework, то классы следует искать в  src/Framework/
            "autoload": {
                "psr-4": {
                    "Framework\\": "src/Framework/"
                }
            }
    Пересоздаем файл автозагрузки
        composer dump-autoload

    Добавляем PHP Unit
          composer require --dev phpunit/phpunit
    Для полноценной работы PHP Unit в корень добавляем каталог /tests/  и также в корень phpunit.xml.dist
    PHPUnit устроен так, что он вначале считывает phpunit.xml и если его нет то phpunit.xml.dist
     таким образом каждый разраб может подменить кофигурацию тестирования.
    В самом файле phpunit в самом начале прописываем
        bootstrap="./vendor/autoload.php"
    это файл автозагрузки будет загружен перед запуском тестов
    Там же указано, где находятся тесты
         <testsuites>
                <testsuite name="Test Suite">
                    <directory>./tests</directory>
    Там же для покрытия кода для анализа указываем белый список каталогов
         <whitelist>
                     <directory suffix=".php">./framework/</directory>

    Делаем тесты на класс Request
         class RequestTest extends TestCase

    Запускаем тесты
        vendor/bin/phpunit

    В тестах переопределяем метод setUp()   // этот метод вызывается перед тестом каждого метода, например используем для обнуления глобальных массивов GET и POST
         public function setUp()
            {
                parent::setUp();

                $_GET = [];
                $_POST = [];
            }

    В файле composer.json phpunit добавился в секцию require-dev так как они нам на проде не нужны,
            composer require --dev phpunit/phpunit      // так добавляли
    Установка всех зависимостей
            composer install
    Установка зависимостей на продакшен без девелоперских пакетов
            composer install --no-dev

    Также полезная секция в composer.json     scripts
                "scripts": {
                    "serve": "php -S 0.0.0.0:8080 -t public public/index.php",
                    "test": "phpunit --colors=always"
                }
    Добавив эту секцию можем запустить сервер одной командой
            composer serve

    Если этот порт занят, то можно выяснить каким процессом
             lsof -i tcp:8080
        И убить его по номеру процесса
            kill -9 <PID>

    Также благодаря этой секции можем запускать тесты более короткой командой
            composer test

    Неудобство глобальных переменных и синглотонов:
        нельзя создать 2 объекта с разными данными
        изменения глобал перем в одном месте влияют/могут привести к ошибкам в другом месте
        неудобство тестирования

    Ранее внутри класса Request использовались глобальные переменные $_GET и $_POST
        вынесем их присваивание в конструктор, тогда класс станет более универсальным
    Чтобы класс стал более независимым, то уберем конструктор и
      добавим в класс так называемые мутаторы get  и set (тогда можем убрать задание из конструктора)
            $request->withQueryParams($_GET);
            $request->withParsedBody($_POST);
    Мутаторы - методы которые изменяют что-либо внутри объекта.

    Применение мутаторов может быть чревато, что изменение в одном объекте могут сломать другие.
    Например:
        $request1 = new Request();
        $request2 = $request1;
    // Здесь обе переменные это указатель на один и тот же объект в памяти.
    И при изменении с помощью сетеров первой переменной, автоматом меняется и вторая, так как объект один и тот же.
    В случае с примитивами строки, числа и т.д. переменные будут разные.

    Иммутабельные объекты - не меняются внутри. один раз создались и остаются такими же.
        любой вызов мутатора не меняют исходный объект, а порождают  его клон.
            Example:
                 public function withQueryParams(array $query): self
                    {
                        $new = clone $this;
                        $new->queryParams = $query;

                        return $new;
                    }
        Этот метод возвращает новый объект.

    Удобным будет создать класс фабрику со статическим методом, чтобы он создавал и возвращал нам объекты класса Request
    Example:
        public static function fromGlobals(array $query = null, array $body = null): Request
            {
                return (new Request())
                    ->withQueryParams($query ?: $_GET)
                    ->withParsedBody($body ?: $_POST);
            }

    Функция сервера получить запрос (обработать его и дать ответ)
    Протокол HTTP ответ содержит заголовки и тело.

    Для того чтобы было универсальным и можно было бы поделиться концепцией и кодом, то введем интерфейсы
        ResponseInterface   и   ServerRequestInterface

    Но на самом деле то, что мы делали выше уже реализовано в PSR7.
    Чтобы добавить в зависимость выполняем.
            composer require psr/http-message

    Теперь наши Request и Response реализуют стандартные интерфейсы общепринятые, но есть момент, что
      пока что много методов указанных в интерфейсе для реализации нам не нужны (приходится делать например заглушки пустые методы)
    Решением является использование пакета от ZEND там уже все это реализовано.
            composer require zendframework/zend-diactoros

    Например в этой библиотеке уже есть Response и его наследники JsonResponse, HtmlResponse.
        и теперь в файле index.php мы будем использовать их.

В видеолекции также для формирования HTTP ответа используется SapiEmitter. Раньше этот класс был в библиотеке  use Zend\HttpHandlerRunner\Emitter\Sapi;
    но сейчас он вынесен в другую.

            composer require zendframework/zend-httphandlerrunner










