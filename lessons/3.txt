PSR-7 фреймворк 3/7: Middleware и Pipeline

Сейчас структура такова в src/App мы пишем все классы, необходимые для работы нашего приложения,
  а в src/Framework  весе код для работы нашего Фремворка
  а public/index.php входной фронт-контроллер

Нужно ли тестировать все классы и методы, которые есть в проекте?
    На самом деле не обязательно.

Постораемся сделать возможность организовывать цепочки обработки ответов.
  чтобы выносить пре и пост обработки в некоторые промежуточные звенья.

Например перед созданием ответа, мы хотим авторизацию.
 Здесь для примера добавим Basic Authorization . она поддерживается всеми браузерами из коробки.
 При такой авторизации в headers запроса добавляется Authorization: Basic Ymd8d6fdjfd...
 Вот это значение хеша Ymd8d6fdjfd...  это закодированное в base64 значение name:password
 Сервер этот хеш раскодирует и получает из него значение логина и пароля.
 Опасность в том, что если кто-то перехватит трафик, то он декдирует этот заголовок и получает весь трафик.
Другой тип авторизации bearer, В первый раз пользователь логинится,
 а далее при запросах в заголовке Authorization: bearer сюда передает полученный ключ.
 У такого ключа например есть срок жизни, и его можно сбросить.

Сделали простенькую тестовую авторизацию. Но сейчас она существует только для роута cabinet.
 нужен посредник, который бы перед запуском разных роутев и экшенов проводил бы авторизацию.
   Решением напрашивается сделать декоратор. сделаем класс BasicAuthActionDecorator
 Чтобы улучшить код и производительность отойдем от декораторов в сторону посредников Middleware


